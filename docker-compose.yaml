networks:
  backend:
    ipam:
      config:
        - subnet: 172.52.0.0/16
secrets:
  WEBPASSWORD:
    file: '/etc/stargate/.secrets/WEBPASSWORD'
services:
  cloudflared:
    command: "tunnel --no-autoupdate run --token ${CLOUDFLARED_TOKEN}"
    container_name: cloudflared
    env_file: .env
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
  dhcphelper:
    cap_add:
      - NET_ADMIN
    container_name: dhcphelper
    environment:
      IP: '172.52.0.10'
    image: homeall/dhcphelper:latest
    network_mode: host
    restart: unless-stopped
  ddns:
    container_name: ddns
    env_file: .env
    environment:
      API_KEY: "${CF_TOKEN}" # confusing name, must be an API token
      ZONE: "${CF_ZONE}"
      SUBDOMAIN: "*"
      PROXIED: "true"
    image: oznu/cloudflare-ddns:latest
    restart: unless-stopped
  flaresolverr:
    container_name: flaresolverr
    env_file: .env
    environment:
      - LOG_LEVEL=info
    image: ghcr.io/flaresolverr/flaresolverr:latest
    ports:
      - 8191:8191
    restart: unless-stopped
  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: jc21/nginx-proxy-manager:latest
    networks:
      default: {}
      backend: {}
    ports:
      - 8080:80
      - 8081:81
      - 8443:443
    restart: unless-stopped
    volumes:
      - /etc/stargate/nginx-proxy-manager:/data
      - /etc/stargate/letsencrypt:/etc/letsencrypt
  ntfy:
    command:
      - serve
    container_name: ntfy
    env_file: .env
    image: binwiederhier/ntfy:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.ntfy.rule=Host(`ntfy.${DOMAIN}`)
      - traefik.http.routers.ntfy.tls=true
      - traefik.http.routers.ntfy.entrypoints=websecure
      - traefik.http.services.ntfy.loadbalancer.server.port=80
  pihole:
    cap_add:
      - NET_ADMIN
    container_name: pihole
    depends_on:
      - dhcphelper
      - traefik
    dns:
      - 1.1.1.1
      - 8.8.8.8
    env_file: .env
    environment:
      WEBPASSWORD_FILE: "/run/secrets/WEBPASSWORD"
    image: pihole/pihole:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.entrypoints=websecure
      - traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}`)
      - traefik.http.routers.pihole.tls=true
      - traefik.http.services.pihole.loadbalancer.server.port=80
    networks:
      default: {}
      backend:
        ipv4_address: "172.52.0.10"
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 81:80
    restart: unless-stopped
    secrets:
      - WEBPASSWORD
    volumes:
      - /etc/stargate/dnsmasq.d:/etc/dnsmasq.d
      - /etc/stargate/pihole:/etc/pihole
  portainer:
    command: -H unix:///var/run/docker.sock --admin-password "${ADMIN_PASSWORD_HASH}"
    container_name: portainer
    depends_on:
      - traefik
    env_file: .env
    image: portainer/portainer-ce
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    ports:
      - 9000:9000
    volumes:
      - /etc/stargate/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
  traefik:
    command:
      - --api.dashboard=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}
      - --entrypoints.websecure.http.tls=true
      - --log.level=DEBUG
      - --providers.docker.exposedbydefault=true
      - --providers.docker=true
      - --serverstransport.insecureskipverify=true
    container_name: traefik
    env_file: .env
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CF_TOKEN}"
      CLOUDFLARE_EMAIL: "${CF_EMAIL}"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: "${CF_EMAIL}"
    image: traefik:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.tls=true
    networks:
      default: {}
      backend: {}
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - /etc/stargate/letsencrypt/acme.json:/etc/traefik/acme.json
      - /var/run/docker.sock:/var/run/docker.sock
  uptime-kuma:
    container_name: uptime-kuma
    depends_on:
      - traefik
    image: louislam/uptime-kuma:1
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime-kuma.entrypoints=websecure
      - traefik.http.routers.uptime-kuma.rule=Host(`status.${DOMAIN}`)
      - traefik.http.routers.uptime-kuma.tls=true
      - traefik.http.services.uptime-kuma.loadbalancer.server.port=3001
    ports:
      - 3001:3001
    restart: unless-stopped
    volumes:
      - /etc/stargate/uptime-kuma:/app/data
  watchtower:
    container_name: watchtower
    env_file: .env
    environment:
      WATCHTOWER_SCHEDULE: "0 0 1 * * *"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_DEBUG: "true"
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
