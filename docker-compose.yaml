networks:
  backend:
    ipam:
      config:
        - subnet: 172.52.0.0/16
services:
  adguard:
    container_name: adguard
    dns:
      - 76.76.2.2
      - 76.76.10.2
    hostname: adguard
    image: adguard/adguardhome
    labels:
      homepage.description: Ad-Blocking DNS Server
      homepage.group: Core
      homepage.href: https://stargate.${DOMAIN:?no domain provided}
      homepage.icon: adguard-home
      homepage.name: AdGuard Home (Primary)
      homepage.widget.password: ${ADMIN_PASSWORD:?no admin password provided}
      homepage.widget.type: adguard
      homepage.widget.url: https://stargate.${DOMAIN:?no domain provided}
      homepage.widget.username: ${ADMIN_USERNAME:?no admin username provided}
      traefik.enable: true
      traefik.http.routers.adguard.entrypoints: websecure
      traefik.http.routers.adguard.rule: Host(`adguard.stargate.${DOMAIN:?no domain provided}`) || Host(`stargate.${DOMAIN:?no domain provided}`)
      traefik.http.routers.adguard.tls: true
      traefik.http.services.adguard.loadbalancer.server.port: 80
    networks:
      backend:
        ipv4_address: 172.52.0.10
      default: {}
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 853:853/tcp
      - 853:853/udp
      - 3000:3000/tcp
      - 5443:5443/tcp
      - 5443:5443/udp
      - 6060:6060/tcp
      - 8843:443/tcp
      - 8880:80/tcp
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/adguard/conf:/opt/adguardhome/conf
      - ${CONFIG_PATH:-./docker}/adguard/work:/opt/adguardhome/work
  adguard-sync:
    command: run --config /config/adguardhome-sync.yaml
    container_name: adguard-sync
    image: ghcr.io/bakito/adguardhome-sync
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/adguard/sync/adguardhome-sync.yaml:/config/adguardhome-sync.yaml
  beszel-agent:
    container_name: beszel-agent
    environment:
      KEY: ${BESZEL_KEY:?no beszel key provided}
      LISTEN: 45876
    image: henrygd/beszel-agent
    network_mode: host
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  cloudflared:
    command: tunnel --no-autoupdate run
    container_name: cloudflared
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARED_TOKEN:?no cloudflared token provided}
    image: cloudflare/cloudflared
    restart: unless-stopped
  ddns:
    cap_drop:
      - all
    container_name: ddns
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:?no cloudflare api token provided}
      DOMAINS: gateway.${DOMAIN:?no domain provided}
      IP6_PROVIDER: none
      PROXIED: false
    image: favonia/cloudflare-ddns
    network_mode: host
    read_only: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: 1000:1000
  ddns-proxied:
    cap_drop:
      - all
    container_name: ddns-proxied
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:?no cloudflare api token provided}
      DOMAINS: "*.${DOMAIN_EXT:?no external domain provided}"
      IP6_PROVIDER: none
      PROXIED: true
    image: favonia/cloudflare-ddns
    network_mode: host
    read_only: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: 1000:1000
  docker-socket-proxy:
    container_name: docker-socket-proxy
    environment:
      CONTAINERS: 1
      POST: 0
      SERVICES: 1
      TASKS: 1
    image: ghcr.io/tecnativa/docker-socket-proxy
    ports:
      - 0.0.0.0:2375:2375
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  golink:
    container_name: golink
    environment:
      TS_AUTH_KEY: ${TAILSCALE_AUTH_KEY:?no tailscale auth key provided}
    image: ghcr.io/tailscale/golink:main
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/golink:/home/nonroot # chown 65532:65532
  node-exporter:
    command: --path.rootfs=/host
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter
    ports:
      - 9100:9100
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
  orb:
    container_name: orb
    image: orbforge/orb
    labels:
      com.centurylinklabs.watchtower.enable: true
      com.centurylinklabs.watchtower.scope: orb
    network_mode: host
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/orb:/root/.config/orb
  tailscale:
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    container_name: tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      TS_AUTH_KEY: ${TAILSCALE_AUTH_KEY:?no tailscale auth key provided}
      TS_AUTH_ONCE: true
      TS_EXTRA_ARGS: --advertise-exit-node
      TS_HOSTNAME: stargate
      TS_ROUTES: ${LAN_CIDR:-192.168.0.0/24}
      TS_STATE_DIR: /var/lib/tailscale
      TS_USERSPACE: false
    image: tailscale/tailscale
    labels:
      homepage.description: Private WireGuard Network
      homepage.group: Core
      homepage.href: https://login.tailscale.com/admin/machines
      homepage.icon: tailscale
      homepage.name: Tailscale
      homepage.widget.deviceid: ${TAILSCALE_DEVICE_ID:?device ID required on new devices}
      homepage.widget.key: ${TAILSCALE_DEVICE_KEY:?no device key provided}
      homepage.widget.type: tailscale
    restart: unless-stopped
    volumes:
      - /dev/net/tun:/dev/net/tun
      - ${CONFIG_PATH:-./docker}/tailscale:/var/lib/tailscale
  traefik:
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/letsencrypt/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN:?no domain provided}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.stargate.${DOMAIN:?no domain provided},*.${DOMAIN:?no domain provided}
      - --entrypoints.websecure.http.tls=true
      - --log.level=INFO
      - --providers.docker.exposedbydefault=false
      - --providers.docker=true
      - --providers.file.filename=/etc/traefik/dynamic.yaml
      - --providers.file.watch=true
      - --serverstransport.insecureskipverify=true
    container_name: traefik
    environment:
      CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_API_TOKEN:?no cloudflare api token provided}
      CLOUDFLARE_EMAIL: ${CLOUDFLARE_EMAIL:?no cloudflare email provided}
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: ${CLOUDFLARE_EMAIL:?no cloudflare email provided}
    extra_hosts:
      - host.docker.internal:172.17.0.1
    hostname: traefik
    image: traefik
    labels:
      homepage.description: Reverse proxy for exposing apps via HTTPS
      homepage.group: Core
      homepage.href: https://traefik.stargate.${DOMAIN:?no domain provided}
      homepage.icon: traefik
      homepage.name: Traefik (Stargate)
      homepage.widget.type: traefik
      homepage.widget.url: http://stargate:8081
    networks:
      backend: {}
      default: {}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/letsencrypt:/etc/letsencrypt
      - ${CONFIG_PATH:-./docker}/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock
  uptime-kuma:
    container_name: uptime-kuma
    hostname: uptime-kuma
    image: louislam/uptime-kuma:1
    labels:
      homepage.description: Component Health Tracking and Alerting
      homepage.group: Core
      homepage.href: https://status.${DOMAIN:?no domain provided}
      homepage.icon: uptime-kuma
      homepage.name: Uptime Kuma
      homepage.widget.slug: technis
      homepage.widget.type: uptimekuma
      homepage.widget.url: http://stargate:3001
      traefik.enable: true
      traefik.http.routers.uptime-kuma.entrypoints: websecure
      traefik.http.routers.uptime-kuma.rule: Host(`uptime-kuma.stargate.${DOMAIN:?no domain provided}`) || Host(`status.${DOMAIN:?no domain provided}`) || Host(`status.${DOMAIN_EXT:?no external domain provided}`)
      traefik.http.routers.uptime-kuma.tls: true
      traefik.http.services.uptime-kuma.loadbalancer.server.port: 3001
    ports:
      - 3001:3001
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-./docker}/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
  watchtower:
    container_name: watchtower
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_DEBUG: true
      WATCHTOWER_SCHEDULE: 0 0 1 * * *
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock